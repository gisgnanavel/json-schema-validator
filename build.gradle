/*
 * Copyright (c) 2014, Francis Galiegue (fgaliegue@gmail.com)
 *
 * This software is dual-licensed under:
 *
 * - the Lesser General Public License (LGPL) version 3.0 or, at your option, any
 *   later version;
 * - the Apache Software License (ASL) version 2.0.
 *
 * The text of this file and of both licenses is available at the root of this
 * project or, if you have the jar distribution, in directory META-INF/, under
 * the names LGPL-3.0.txt and ASL-2.0.txt respectively.
 *
 * Direct link to the sources:
 *
 * - LGPL 3.0: https://www.gnu.org/licenses/lgpl-3.0.txt
 * - ASL 2.0: http://www.apache.org/licenses/LICENSE-2.0.txt
 */

/*
 * This has to be here... It will not be taken into account in common.gradle!
 *
 * Looks like a serious bug... See also:
 *
 * http://forums.gradle.org/gradle/topics/buildscript_in_subprojects_ignored
 */
/*
 * This has to be here... It will not be taken into account in common.gradle!
 *
 * Looks like a serious bug... See also:
 *
 * http://forums.gradle.org/gradle/topics/buildscript_in_subprojects_ignored
 *
 * We also use Spring's propdeps plugin to have a _real_ provided scope. See:
 *
 * https://github.com/spring-projects/gradle-plugins/tree/master/propdeps-plugin
 */


group = "com.oneview";

buildscript {

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath(
                'org.ajoberstar:gradle-git:1.5.1',
                'com.oneview:gradle-plugin:1.1.0'
        )
    }
}

repositories {
    jcenter()
    mavenCentral()
}

apply plugin: "java"
apply plugin: "maven-publish"
apply plugin: 'com.oneview.buildplugin'

sourceCompatibility = "1.8";

project.ext {
    description = "A Java implementation of the JSON Schema specification";
};


publishing {
    publications {
        publishJar(MavenPublication) {
            from components.java
        }
    }
}

/*
 * List of dependencies
 */
dependencies {
    compile(group: "com.github.fge", name: "json-schema-core",
        version: "1.2.5");
    compile(group: "javax.mail", name: "mailapi", version: "1.4.3");
    compile(group: "joda-time", name: "joda-time", version: "2.3");
    compile(group: "com.googlecode.libphonenumber", name: "libphonenumber",
        version: "6.2");
    compile(group: "com.google.code.findbugs", name: "jsr305",
        version: "3.0.0");
    compile(group: "net.sf.jopt-simple", name: "jopt-simple", version: "4.6");
    testCompile(group: "org.testng", name: "testng", version: "6.8.7") {
        exclude(group: "junit", module: "junit");
        exclude(group: "org.beanshell", module: "bsh");
        exclude(group: "org.yaml", module: "snakeyaml");
    };
    testCompile(group: "org.mockito", name: "mockito-core", version: "1.9.5");
    testCompile(group: "org.easytesting", name: "fest-assert", version: "1.4");
}

javadoc.options.links("http://docs.oracle.com/javase/6/docs/api/");
javadoc.options.links("http://jsr-305.googlecode.com/svn/trunk/javadoc/");
javadoc.options.links("http://fasterxml.github.com/jackson-databind/javadoc/2.2.0/");
javadoc.options.links("http://fasterxml.github.com/jackson-core/javadoc/2.2.0/");
javadoc.options.links("http://docs.guava-libraries.googlecode.com/git-history/v16.0.1/javadoc/");
javadoc.options.links("http://fge.github.io/btf/");
javadoc.options.links("http://fge.github.io/msg-simple/");
javadoc.options.links("http://fge.github.io/jackson-coreutils/");
javadoc.options.links("http://fge.github.io/uri-template/");
javadoc.options.links("http://fge.github.io/json-schema-core/1.2.x/");


/*
 * Necessary! Otherwise TestNG will not be used...
 *
 * Also, we don't want gradle's default HTML report: it does not support
 * parameterized tests which I use a _lot_.
 */
test {
    useTestNG() {
        useDefaultListeners = true;
    };
}

/*
 * Necessary to generate the source and javadoc jars
 */
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources";
    from sourceSets.main.allSource;
}

/*
 * Javadoc: we need to tell where the overview.html is, it will not pick it up
 * automatically...
 */

javadoc.options {
    overview = "src/main/javadoc/overview.html";
    extDirs = [ file("src/main/javadoc") ];
    docFilesSubDirs = true;
}

/*
 * Equally annoyingly, the docFilesSubDirs option above does not seem to have
 * any effect :/
 */
task copyDocFiles(dependsOn: javadoc) << {
    copy {
        from("src/main/javadoc") {
            include "**/doc-files/**";
        };
        into javadoc.destinationDir;
    }
}

task javadocJar(type: Jar, dependsOn: copyDocFiles) {
    classifier = "javadoc";
    from javadoc.destinationDir;
}

/*
 * Creates a jar that can be used as a library on java projects.
 * This jar already includes all the dependencies.
 */
task libJar(type: Jar, dependsOn: jar) {
    classifier = "lib";
    from {
        configurations.compile.collect { zipTree(it) }
    };
    with jar;
}

jar {
    manifest {
        attributes("Main-Class": "com.github.fge.jsonschema.main.cli.Main");
    }
}
artifacts {
    archives jar;
    archives sourcesJar;
    archives javadocJar;
    archives libJar;
}

